#load "stdlib.elo"
#load "stdio.elo"

Token_Kind :: enum {
    EOF,
    NAME,
    NUMBER,
    DOT,
    COMMA,
}

Token :: struct {
    kind: Token_Kind;
    line: int;
    col:  int;
    lexeme: *u8;
    integer: u64;
}

Lexer :: struct {
    stream: []u8;
    stream_idx: u64;
    tok: Token;
}

is_space :: (ch: u8) -> bool {
    ifcase ch {
    case:
        return false;
    case ' ': case '\t': case '\f': case '\v': case '\n': case '\r':
        return true;
    }
}

is_alpha :: (ch: u8) -> bool {
    return 'A' <= ch && ch <= 'Z' || 'a' <= ch && ch <= 'z';
}

advance :: (lexer: *Lexer) {
    // skip whitespace
    while (is_space(lexer.stream[lexer.stream_idx])) {
        lexer.stream_idx += 1u64;
    }

    printf("ALPHA\n");

    start := lexer.stream;

    ifcase lexer.stream[lexer.stream_idx] {
    case 0u8:
        lexer.tok.kind = Token_Kind.EOF;
    case 'a'..'z':
    case 'A'..'Z':
    case '_':
        lexer.tok.kind = Token_Kind.NAME;
        while is_alpha(lexer.stream[lexer.stream_idx]) {
            lexer.stream_idx += 1u64;
        }
    }
}

main :: () -> int {
    puts("Hello world.");
    stream := "This is some text. 1 21 1223.\n New line okay cool.";
    lexer: Lexer;
    lexer.stream = stream;
    lexer.stream_idx = 0u64;
    advance(*lexer);
    puts("Goodbye world.");
    return 0;
}
