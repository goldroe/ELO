#load "stdlib.elo"
#load "stdio.elo"

Token_Kind :: enum {
    UNKNOWN,
    EOF,
    NAME,
    NUMBER,
    DOT,
    COMMA,
}

Token :: struct {
    kind: Token_Kind;
    line: int;
    col:  int;
    lexeme: *u8;
    integer: u64;
}

Lexer :: struct {
    stream: *u8;
    tok: Token;
}

is_space :: (ch: u8) -> bool {
    ifcase ch {
    case:
        return false;
    case ' ': case '\t': case '\f': case '\v': case '\n': case '\r':
        return true;
    }
}

is_alpha :: (ch: u8) -> bool {
    return 'A' <= ch && ch <= 'Z' || 'a' <= ch && ch <= 'z';
}

is_digit :: (ch: u8) -> bool {
    return '0' <= ch && ch <= '9';
}

eat_char :: (lexer: *Lexer) {
    lexer.stream = lexer.stream + 1;
}

eat_whitespace :: (lexer: *Lexer) {
    while (is_space(lexer.stream.*)) {
        eat_char(lexer);
    }
}

advance :: (lexer: *Lexer) {
    eat_whitespace(lexer);

    ifcase lexer.stream.* {
    case:
        lexer.tok.kind = Token_Kind.UNKNOWN;
        printf("error: unexpected char '%c'.\n", lexer.stream.*);
        eat_char(lexer);

    case 0u8:
        lexer.tok.kind = Token_Kind.EOF;

    case 'a'..'z':
    case 'A'..'Z':
    case '_':
        lexer.tok.kind = Token_Kind.NAME;
        while is_alpha(lexer.stream.*) {
            eat_char(lexer);
        }

    case '0'..'9':
        lexer.tok.kind = Token_Kind.NUMBER;
        while is_digit(lexer.stream.*) {
            eat_char(lexer);
        }

    case '.':
        lexer.tok.kind = Token_Kind.DOT;
        eat_char(lexer);
    }
}

main :: () -> int {
    lexer: Lexer;
    lexer.stream = "This is some 1002 text. 1 21 1223. * 12";;

    while 1 {
        advance(*lexer);
        ifcase lexer.tok.kind {
        case:
            puts("UNKNOWN");
        case Token_Kind.EOF:
            puts("EOF");
        case Token_Kind.NAME:
            puts("NAME");
        case Token_Kind.NUMBER:
            puts("NUMBER");
        case Token_Kind.DOT:
            puts("DOT");
        case Token_Kind.COMMA:
            puts("COMMA");
        }

        if (lexer.tok.kind == Token_Kind.EOF) {
            break;
        }
    }

    return 0;
}
