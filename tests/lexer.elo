#import "libc/stdlib.elo";
#import "libc/stdio.elo";
#import "libc/ctype.elo";

Token_Kind :: enum {
    UNKNOWN,
    EOF,
    NAME,
    NUMBER,
    DOT,
    COMMA,
}

Token :: struct {
    kind: Token_Kind;
    line: int;
    col:  int;
    lexeme: *u8;
    union {
        integer: u64;
        float: f64;
        str: *u8;
    }
}

Lexer :: struct {
    stream: *u8;
    tok: Token;
}

eat_char :: (lexer: *Lexer) {
    lexer.stream = lexer.stream + 1;
}

eat_whitespace :: (lexer: *Lexer) {
    while isspace(cast(int)lexer.stream.*) {
        eat_char(lexer);
    }
}

advance :: (lexer: *Lexer) {
    eat_whitespace(lexer);

    ifcase lexer.stream.* {
    case:
        lexer.tok.kind = Token_Kind.UNKNOWN;
        printf("error: unexpected char '%c'.\n", cast(int)lexer.stream.*);
        eat_char(lexer);

    case 0u8:
        lexer.tok.kind = Token_Kind.EOF;

    case 'a'..'z':
    case 'A'..'Z':
    case '_':
        lexer.tok.kind = Token_Kind.NAME;
        while isalpha(cast(int)lexer.stream.*) {
            eat_char(lexer);
        }

    case '0'..'9':
        lexer.tok.kind = Token_Kind.NUMBER;
        while isdigit(cast(int)lexer.stream.*) {
            eat_char(lexer);
        }

    case '.':
        lexer.tok.kind = Token_Kind.DOT;
        eat_char(lexer);
    }
}

main :: () -> int {
    lexer: *Lexer = cast(*Lexer)malloc(64u64);
    lexer.stream = "This is some 1002 text. 1 21 1223. * 12";

    while true {
        advance(lexer);
        ifcase lexer.tok.kind {
        case:
            puts("UNKNOWN");
        case Token_Kind.EOF:
            puts("EOF");
        case Token_Kind.NAME:
            puts("NAME");
        case Token_Kind.NUMBER:
            puts("NUMBER");
        case Token_Kind.DOT:
            puts("DOT");
        case Token_Kind.COMMA:
            puts("COMMA");
        }

        if (lexer.tok.kind == Token_Kind.EOF) {
            break;
        }
    }

    return 0;
}
