Vector2 :: struct {
 x: f32;
 y: f32;
}

Vector3 :: struct {
 x: f32;
 y: f32;
 z: f32;
}

operator + :: (a: Vector2, b: Vector2) -> Vector2 {
 result : Vector2 = .{a.x + b.x, a.y + b.y};
 return result;
}

operator + :: (a: Vector3, b: Vector3) -> Vector3 {
 result : Vector3 = .{a.x + b.x, a.y + b.y, a.z + b.z};
 return result;
}

Fruit :: struct {
 calories: s32;
 nutrients: s32;
}

Buzz :: struct {
 bar: s32;
}

Foo :: struct {
 buzz: Buzz;
}

main :: () {
 v0: Vector2 = .{0.0, 1.0};
 v1: Vector2 = .{1.0, 0.0};
 v2 := v0 + v1;

 foo: Foo;

 // error
 foo.buzz.bar[0] = 0;
 // error
 foo.buzz.bar.foo.x = 0;

 arr2: ^^s32;

 // error
 arr2[0][0][0] = 0;
 arr2[0] = 0;

 x := 0;
 y := 10;

 // error
 y = x = x * 2 + 1 = x;

 apple: Fruit;
 apple.calories = 0;
 apple.nutrients = 40;

 // error
 apple.bad_field = 0;

 pear : Fruit = .{ 100, 40 };

 arr: []s32;

 for a in arr {
 }

 n := 10;
 for i in 0..n  {
  arr[i] = 10.0;
 }
}