ATOM      :: #type WORD
BOOL      :: #type int
BOOLEAN   :: #type BOOL
BYTE      :: #type u8
WORD      :: #type u16
DWORD     :: #type uint
UINT_PTR  :: #type usize
INT_PTR   :: #type isize
ULONG_PTR :: #type usize
LONG_PTR  :: #type isize
UINT      :: #type uint
INT       :: #type int
VOID      :: #type void
PVOID     :: #type *void
LPVOID    :: #type *void
LPSTR     :: #type *u8
LPCSTR    :: #type *u8
HANDLE    :: #type LPVOID
HBRUSH    :: #type HANDLE
HCURSOR   :: #type HICON
HICON     :: #type HANDLE
HINSTANCE :: #type HANDLE
HMENU     :: #type HANDLE
HMODULE   :: #type HANDLE
HWND      :: #type HANDLE
LONG      :: #type i32
LPARAM    :: #type LONG_PTR
LRESULT   :: #type LONG_PTR
WPARAM    :: #type UINT_PTR
LPMSG     :: #type *MSG

WNDPROC :: #type (HWND, UINT, WPARAM, LPARAM) -> LRESULT

WNDCLASSA :: struct {
    style: UINT;
    lpfnWndProc: WNDPROC;
    cbClsExtra: int;
    cbWndExtra: int;
    hInstance: HINSTANCE;
    hIcon: HICON;
    hCursor: HCURSOR;
    hbrBackground: HBRUSH;
    lpszMenuName: LPCSTR;
    lpszClassName: LPCSTR;
}

POINT :: struct {
    x: LONG;
    y: LONG;
}

MSG :: struct {
    hwnd: HWND;
    message: UINT;
    wParam: WPARAM;
    lParam: LPARAM;
    time: DWORD;
    pt: POINT;
}

CS_VREDRAW          :: 0x0001u32;
CS_HREDRAW          :: 0x0002u32;
CS_DBLCLKS          :: 0x0008u32;
CS_OWNDC            :: 0x0020u32;
CS_CLASSDC          :: 0x0040u32;
CS_PARENTDC         :: 0x0080u32;
CS_NOCLOSE          :: 0x0200u32;
CS_SAVEBITS         :: 0x0800u32;
CS_BYTEALIGNCLIENT  :: 0x1000u32;
CS_BYTEALIGNWINDOW  :: 0x2000u32;
CS_GLOBALCLASS      :: 0x4000u32;

CW_USEDEFAULT     :: 0x80000000u32;

WS_OVERLAPPED     :: 0x00000000u32;
WS_POPUP          :: 0x80000000u32;
WS_CHILD          :: 0x40000000u32;
WS_MINIMIZE       :: 0x20000000u32;
WS_VISIBLE        :: 0x10000000u32;
WS_DISABLED       :: 0x08000000u32;
WS_CLIPSIBLINGS   :: 0x04000000u32;
WS_CLIPCHILDREN   :: 0x02000000u32;
WS_MAXIMIZE       :: 0x01000000u32;
WS_CAPTION        :: 0x00C00000u32;     // WS_BORDER | WS_DLGFRAME
WS_BORDER         :: 0x00800000u32;
WS_DLGFRAME       :: 0x00400000u32;
WS_VSCROLL        :: 0x00200000u32;
WS_HSCROLL        :: 0x00100000u32;
WS_SYSMENU        :: 0x00080000u32;
WS_THICKFRAME     :: 0x00040000u32;
WS_GROUP          :: 0x00020000u32;
WS_TABSTOP        :: 0x00010000u32;
WS_MINIMIZEBOX    :: 0x00020000u32;
WS_MAXIMIZEBOX    :: 0x00010000u32;
WS_TILED          :: WS_OVERLAPPED;
WS_ICONIC         :: WS_MINIMIZE;
WS_SIZEBOX        :: WS_THICKFRAME;
WS_TILEDWINDOW    :: WS_OVERLAPPEDWINDOW;

//       Common Window Styles
WS_OVERLAPPEDWINDOW :: WS_OVERLAPPED    |
                       WS_CAPTION       |
                       WS_SYSMENU       |
                       WS_THICKFRAME    |
                       WS_MINIMIZEBOX   |
                       WS_MAXIMIZEBOX;
WS_POPUPWINDOW      :: WS_POPUP   |
                       WS_BORDER  |
                       WS_SYSMENU;
WS_CHILDWINDOW      :: WS_CHILD;



//
// Window Messages
//
WM_NULL        :: 0x0000;
WM_CREATE      :: 0x0001;
WM_DESTROY     :: 0x0002;
WM_MOVE        :: 0x0003;
WM_SIZE        :: 0x0005;

WM_ACTIVATE    :: 0x0006;
//
// WM_ACTIVATE state values
//
WA_INACTIVE    :: 0;
WA_ACTIVE      :: 1;
WA_CLICKACTIVE :: 2;

WM_SETFOCUS          :: 0x0007u32;
WM_KILLFOCUS         :: 0x0008u32;
WM_ENABLE            :: 0x000Au32;
WM_SETREDRAW         :: 0x000Bu32;
WM_SETTEXT           :: 0x000Cu32;
WM_GETTEXT           :: 0x000Du32;
WM_GETTEXTLENGTH     :: 0x000Eu32;
WM_PAINT             :: 0x000Fu32;
WM_CLOSE             :: 0x0010u32;
WM_QUIT              :: 0x0012u32;
WM_ERASEBKGND        :: 0x0014u32;
WM_SYSCOLORCHANGE    :: 0x0015u32;
WM_SHOWWINDOW        :: 0x0018u32;
WM_WININICHANGE      :: 0x001Au32;

//
// Color Types
//
CTLCOLOR_MSGBOX             ::   0;
CTLCOLOR_EDIT               ::   1;
CTLCOLOR_LISTBOX            ::   2;
CTLCOLOR_BTN                ::   3;
CTLCOLOR_DLG                ::   4;
CTLCOLOR_SCROLLBAR          ::   5;
CTLCOLOR_STATIC             ::   6;
CTLCOLOR_MAX                ::   7;
COLOR_SCROLLBAR             ::   0;
COLOR_BACKGROUND            ::   1;
COLOR_ACTIVECAPTION         ::   2;
COLOR_INACTIVECAPTION       ::   3;
COLOR_MENU                  ::   4;
COLOR_WINDOW                ::   5;
COLOR_WINDOWFRAME           ::   6;
COLOR_MENUTEXT              ::   7;
COLOR_WINDOWTEXT            ::   8;
COLOR_CAPTIONTEXT           ::   9;
COLOR_ACTIVEBORDER          ::  10;
COLOR_INACTIVEBORDER        ::  11;
COLOR_APPWORKSPACE          ::  12;
COLOR_HIGHLIGHT             ::  13;
COLOR_HIGHLIGHTTEXT         ::  14;
COLOR_BTNFACE               ::  15;
COLOR_BTNSHADOW             ::  16;
COLOR_GRAYTEXT              ::  17;
COLOR_BTNTEXT               ::  18;
COLOR_INACTIVECAPTIONTEXT   ::  19;
COLOR_BTNHIGHLIGHT          ::  20;
COLOR_3DDKSHADOW               :: 21;
COLOR_3DLIGHT                  :: 22;
COLOR_INFOTEXT                 :: 23;
COLOR_INFOBK                   :: 24;
COLOR_HOTLIGHT                 :: 26;
COLOR_GRADIENTACTIVECAPTION    :: 27;
COLOR_GRADIENTINACTIVECAPTION  :: 28;
COLOR_MENUHILIGHT              :: 29;
COLOR_MENUBAR                  :: 30;
COLOR_DESKTOP           ::  COLOR_BACKGROUND;
COLOR_3DFACE            ::  COLOR_BTNFACE;
COLOR_3DSHADOW          ::  COLOR_BTNSHADOW;
COLOR_3DHIGHLIGHT       ::  COLOR_BTNHIGHLIGHT;
COLOR_3DHILIGHT         ::  COLOR_BTNHIGHLIGHT;
COLOR_BTNHILIGHT        ::  COLOR_BTNHIGHLIGHT;


// PeekMessage() Options
PM_NOREMOVE   :: 0x0000u32;
PM_REMOVE     :: 0x0001u32;
PM_NOYIELD    :: 0x0002u32;

GetModuleHandleA :: (lpModuleName: LPCSTR) -> HMODULE #foreign
RegisterClassA   :: (lpWndClass: *WNDCLASSA) -> ATOM #foreign
DefWindowProcA   :: (hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT #foreign
CreateWindowExA  :: (dwExStyle: DWORD, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID) -> HWND #foreign

PeekMessageA :: (lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT) -> BOOL #foreign
TranslateMessage :: (lpMsg: *MSG) -> BOOL #foreign
DispatchMessageA :: (lpMsg: *MSG) -> LRESULT #foreign

Sleep :: (dwMilliseconds: DWORD) -> void #foreign

LoadCursorA :: (hInstance: HINSTANCE, lpCursorName: LPCSTR) -> HCURSOR #foreign


PostQuitMessage :: (nExitCode: int) -> VOID #foreign
